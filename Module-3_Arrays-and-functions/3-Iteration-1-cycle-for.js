// Функція calculateTotalPrice(order) приймає один параметр order - масив чисел.
// Доповни функцію так, щоб вона повертала загальну суму елементів з масиву order.

// Оголошена функція calculateTotalPrice(order)
// Виклик функції calculateTotalPrice([12, 85, 37, 4]) повертає 138
// Виклик функції calculateTotalPrice([164, 48, 291]) повертає 503
// Виклик функції calculateTotalPrice([412, 371, 94, 63, 176]) повертає 1116
// Виклик функції calculateTotalPrice() з випадковим масивом повертає правильне значення

//============================================================================================================================================

// Щоб розрахувати загальну суму елементів масиву, можна використати метод`reduce()`.
// Цей метод приймає функцію з двома параметрами: `accumulator` та`currentValue`.
// Параметр`accumulator` - це накопичувач, який зберігає проміжний результат,
// а параметр`currentValue` - це поточний елемент масиву.Функція повертає нове значення накопичувача,
// яке використовується наступного разу при обробці наступного елемента масиву.

// Отже, код функції `calculateTotalPrice` буде наступним:

function calculateTotalPrice(order) {
  const totalPrice = order.reduce(
    (accumulator, currentValue) => accumulator + currentValue,
    0
  );
  return totalPrice;
}

// Тепер, при виклику`calculateTotalPrice([12, 85, 37, 4])`, отримаємо 138,
//     при виклику`calculateTotalPrice([164, 48, 291])` - 503,
//     при виклику`calculateTotalPrice([412, 371, 94, 63, 176])` - 1116.
